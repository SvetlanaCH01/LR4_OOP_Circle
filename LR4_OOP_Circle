using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace LR4_OOP
{
    public partial class Form1 : Form
    {
        Storage Circle = new Storage(50); 
        public Form1()
        {
            InitializeComponent();
        }
        private void PicBox_Paint(object sender, PaintEventArgs e)
        {
            for (int i = 0; i < Circle.GetSize(); i++)
            {
                Circle.GetNow().Draw(e);
                Circle.GetNext();
            }
            Circle.Get0();
        }
        private void PicBox_MouseClick(object sender, MouseEventArgs e)
        {
            int a = 0;
            for (int i = 0; i < Circle.GetSize(); i++)
            {
                if (Circle.GetNow().Border(e.X, e.Y) == true)
                {
                    a++;
                }
                Circle.GetNext();
            }
            Circle.Get0();
            if (a == 0)
            {
                CCircle Lap = new CCircle(e.X, e.Y);
                Circle.Add(Lap);
            }
            PicBox.Refresh();
        }
        private void Delete_Click(object sender, EventArgs e)
        {
            int k = 0;
            for (int i = 0; i < (Circle.GetSize()-1); i++)
            {
                Circle.GetNext();
            }
            for (int i = Circle.GetSize()-1; i>=0; i--)
            {
                if (Circle.GetNow().Getselect() == true)
                {
                    Circle.Delete(i);
                }
                Circle.GetPrevious();
            }

            Circle.Get0();
            PicBox.Refresh();
        }
    }
    public class CCircle
    {
        private bool select;
        private int x;
        private int y;
        private const int r = 30;
        public CCircle()
        {
            y= x = 0;
            select = false;
        }
        public CCircle(int _x, int _y)
        {
            x = _x;
            y = _y;
            select = false;
        }
        public bool Getselect()
        {
            return select;
        }
        public bool Border(int xS, int yS) // проверка попадания в круг 
        {
            bool bord = false;
            int _x = Math.Abs(xS - x);
            int _y = Math.Abs(yS - y);
            if ((int)Math.Sqrt(_x*_x+_y*_y)<=r)
            {
                if (select == true)
                {
                    select = false;
                }
                else
                {
                    select = true;
                }
                bord = true;
            }
            return bord;
        }
        public void Draw(PaintEventArgs e) 
        {
            Pen Pen1 = new Pen(Brushes.DeepSkyBlue,2);
            Pen Pen2 = new Pen(Brushes.Red,2);
            if (select == true)
            {
                e.Graphics.DrawEllipse(Pen1, x-r, y-r, r * 2, r * 2);
            }
            else
            {
                e.Graphics.DrawEllipse(Pen2, x-r, y-r, r * 2, r * 2);
            }
        }
    }
    class Storage
    {
        CCircle[] Block;
        int size;
        int power;
        int index;
        public Storage()
        {
            index = 0;
            size = 0;
            power = 0;
            Block = null;
        }
        public Storage(int power)
        {
            index = 0;
            size = 0;
            this.power = power;
            Block = new CCircle[power];
        }
        ~Storage()
        {
            Console.Write("Destructor Storage \n");
        }
        public void ExpandBlock()//расширение массива
        {
            CCircle[] newBlock = Block;
            Block = new CCircle[power * 2];
            for (int i = 0; i < power; i++)
            {
                Block[i] = newBlock[i];
            }
            power = power * 2;
        }
        public void Add(CCircle obj)//добавление
        {
            size++;
            if (size == power)
                ExpandBlock();
            Block[size-1] = obj;
        }
        public void Delete(int a)//удаление 
        {
            for (int i = a; i < size - 1; i++)
            {
                Block[i] = Block[i + 1];
            }
            Block[size] = null;
            size--;
        }
        public int GetSize()
        {
            return size;
        }
        public int GetPower()
        {
            return power;
        }
        public void GetNext()
        {
            index++;
        }
        public void GetPrevious()
        {
            index--;
        }
        public void Get0()
        {
            index = 0;
        }
        public CCircle GetNow()
        {
            if (Block[index] != null)
                return Block[index];
            else return null;
        }
    }
}
